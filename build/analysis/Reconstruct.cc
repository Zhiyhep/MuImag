// Save the reconstructed result to root file
// Writer: Zhi Yu
// Date: 2018/1/26
// Flow: -> Open and read raw data file generated by Geant4
//       -> Reconstruct hit position based on weight algorithm
//       -> Save the result as structure Pos in root file
//
#include "TFile.h"
#include "TTree.h"
#include "TClassTable.h"
#include "TSystem.h"
#include "TROOT.h"
#include "TVector3.h"
#include "../../include/PrimaryHits.hh"
#include <iostream>

void Reconstruct_rw(TString filename){
    gSystem->AddIncludePath("-I../../include");
    gSystem->Load("libPhysics");
    TFile *f = new TFile(filename,"update");
    TTree *t = (TTree *)f->Get("G4Event");
    TTree *rt = new TTree("Reconstruct","Reconstructed results");
    TVector3  *pos1 = new TVector3();
    TVector3  *pos2 = new TVector3();
    TVector3  *pos3 = new TVector3();
    TVector3  *pos4 = new TVector3();
    rt->Branch("Pos1","TVector3",&pos1);
    rt->Branch("Pos2","TVector3",&pos2);
    rt->Branch("Pos3","TVector3",&pos3);
    rt->Branch("Pos4","TVector3",&pos4);

    PrimaryHits *phit = new PrimaryHits;
    TBranch *event = t->GetBranch("event");
    event->SetAddress(&phit);
    Int_t nentry = t->GetEntries();
    Double_t E_THR = 0.; //Threshold deposit energy
    for(Int_t nevent = 0; nevent < nentry; nevent++){
        event->GetEntry(nevent);
        if(phit->IsDetectedInVolume("gas",E_THR) && phit->IsDetectedInVolume("gas2",E_THR) 
        && phit->IsDetectedInVolume("gas3",E_THR) && phit->IsDetectedInVolume("gas4",E_THR)){
           std::cout << nevent <<"ï¼š "<<phit->GetNhitsInVolume("gas")<<" "
            <<phit->GetNhitsInVolume("gas2")<<" "<<phit->GetNhitsInVolume("gas3")
            <<" "<<phit->GetNhitsInVolume("gas4")<<std::endl;
           TVector3 p1 = phit->GetMeanPositionInVolume("gas");
           TVector3 p2 = phit->GetMeanPositionInVolume("gas2");
           TVector3 p3 = phit->GetMeanPositionInVolume("gas3");
           TVector3 p4 = phit->GetMeanPositionInVolume("gas4");
           pos1->SetXYZ(p1.x(),p1.y(),p1.z());
           pos2->SetXYZ(p2.x(),p2.y(),p2.z());
           pos3->SetXYZ(p3.x(),p3.y(),p3.z());
           pos4->SetXYZ(p4.x(),p4.y(),p4.z());
           rt->Fill();
           }
    }
    rt->Write("",TObject::kOverwrite);
    f->Close();
}

void Reconstruct(){
 R__LOAD_LIBRARY(../../include/libPrimaryHits.so)
    Reconstruct_rw("../rawdata.root");
}
